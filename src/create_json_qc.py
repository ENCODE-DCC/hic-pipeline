#!/usr/bin/env python

import argparse
import json


def parse_arguments():
    parser = argparse.ArgumentParser(
                        prog='ENCODE DCC generate HTML report and QC JSON.',
                        description='')
    parser.add_argument('--title', type=str, default='Untitled',
                        help='Title of sample.')
    parser.add_argument('--desc', type=str, default='No description',
                        help='Description for sample.')
    # In the hic.wdl, library_complexity will be an array of filepaths. 
    # Insert the array as an argument with cromwell substitution: 
    # --library-complexity ${sep=' ' library_complexity}
    parser.add_argument(
        '--library-complexity',
        type=str,
        nargs='*',
        help='List of library_complexity.txt files per replicate.'
    )
    parser.add_argument(
        '--library-stats',
        type=str,
        nargs='*',
        help='List of statistics files produced during dedup per replicate.'
    )
    parser.add_argument(
        '--ligation-stats',
        type=str,
        nargs='*',
        help='List of result_norm.txt.res.txt files generated by countligations.sh per read pair.'
    )
    parser.add_argument(
        '--alignment-stats',
        type=str,
        nargs='*',
        help='List of alignment_stats.txt files generated in fragment task per read pair.'
    )

    args = parser.parse_args()
    # log.setLevel(args.log_level)
    # log.info(sys.argv)
    return args

def read_lines(filepath):
    with open(filepath) as f:
        data = f.readlines()
    return data

def split_into_key_value(data):
    """
    Split items of data list into key, value tuples, making the property names
    lowercase_underscore in the process.
    """
    output = []
    for line in data:
        split_line = line.split(': ')
        name = '_'.join(line[0].strip().lower())
        value = line[1].strip()
        output.append(name, value)
    return output

def parse_norm_res(filepath):
    parsed = {}
    with open(filepath) as f:
        data = f.read()
    parsed[filepath] = data.strip()
    return parsed


def parse_library_complexity(filepath):
    parsed = {}
    data = read_lines(filepath)
    split_data = split_into_key_value(data)
    parsed[filepath] = dict(split_data)
    return parsed
    # Unique Reads: 12,101 
    # PCR Duplicates: 120 
    # Optical Duplicates: 0 
    # Library Complexity Estimate: 618,223


def parse_library_stats(filepath):
    parsed = {}
    data = read_lines(filepath)
    split_data = split_into_key_value(data)
    parsed_data = dict(split_data)
    for k, v in parsed_data.items():
        if '%' in v and '\t' not in v:
            split_value = v.split['(']
            values = {
                'total': split_value[0].strip(),
                'percent': split_value[1].rstrip('%)')
            }
            parsed_data[k] = values
        if 'bias' in k:
            split_value = v.split['\t']

    parsed[filepath] = parsed_data
    return parsed
    # dangling ends, # ligation
    # junctions, #intra vs inter chromosomal reads, # inner/outer/right/left
    # read pairs, a histogram of the MAPQ values, a histogram of the distance
    # from the closest restriction enzyme site, and a count of which end was closest to the
    # restriction enzyme site.
    #    Intra-fragment Reads: 6,969(57.59%)
    #Hi-C Contacts: 5,132(42.41%)
    # Ligation Motif Present: 3 (0.02%)
    # 3' Bias (Long Range): 65% - 35%
    # Pair Type %(L-I-O-R): 25% - 23% - 27% - 25%
    #Inter-chromosomal: 6 (0.05%)
    #Intra-chromosomal: 5,126 (42.36%)
    #Short Range (<20Kb): 4,537 (37.49%)
    #Long Range (>20Kb): 589 (4.87%)



def main():
    # read params
    args = parse_arguments()
    json_all = {}
    json_all['general'] = {}
    json_all['general']['date'] = now()
    # json_all['general']['pipeline_ver'] = args.pipeline_ver
    # json_all['general']['peak_caller'] = args.peak_caller
    # json_all['general']['genome'] = args.genome
    json_all['general']['description'] = args.desc
    json_all['general']['title'] = args.title

if __name__== '__main__':
    main()