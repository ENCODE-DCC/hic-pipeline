defaults: &defaults
  docker:
    - image: circleci/buildpack-deps:xenial-scm
  working_directory: ~/ENCODE-DCC/hic-pipeline

machine_defaults: &machine_defaults
  machine:
    image: ubuntu-1604:201903-01
  working_directory: ~/ENCODE-DCC/hic-pipeline

lint: &lint
  docker:
    - image: quay.io/encode-dcc/hic-pipeline:circleci-lint
  working_directory: ~/ENCODE-DCC/hic-pipeline

py37: &py37
  docker:
    - image: circleci/python:3.7.4-stretch
  working_directory: ~/ENCODE-DCC/hic-pipeline

rust: &rust
  docker:
    - image: circleci/rust:1.42.0-stretch
  working_directory: ~/ENCODE-DCC/hic-pipeline

commands:
  run_tox:
    description: "Install and run tox with a given environment"
    parameters:
      toxenv:
        description: "The name of the environment as per tox.ini, e.g. py37 or lint"
        type: string
      extra_args:
        description: "Extra arguments that are consumed only when running pytest"
        type: string
        default: ""
    steps:
      - run: sudo pip install tox
      - run: tox -e << parameters.toxenv >> -- << parameters.extra_args >>

  set_environment_variables:
    description: "Set docker image env vars for builds and WDL test runs"
    steps:
      - run:
          command: |
            echo "export HIC_DOCKER_IMAGE_TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" >> ${BASH_ENV}
            echo "export QUAY_REPO=hic-pipeline" >> ${BASH_ENV}
            echo "export DOCKERFILE_DIR=docker_image" >> ${BASH_ENV}
            echo "export HICCUPS_DOCKER_IMAGE_TAG=quay.io/encode-dcc/hiccups:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" >> ${BASH_ENV}
            echo "export HICCUPS_QUAY_REPO=hiccups" >> ${BASH_ENV}
            echo "export HICCUPS_DOCKERFILE_DIR=nvidia_docker_image" >> ${BASH_ENV}

  get_pipeline_version:
    description: get pipeline version from __init__.py
    steps:
      - run:
          command: |
            PIPELINE_VERSION=$(python -c "import hic_pipeline;print(hic_pipeline.__version__)")
            echo "export PIPELINE_VERSION=${PIPELINE_VERSION}" >> ${BASH_ENV}

version: 2.1
jobs:
  lint:
    <<: *lint
    steps:
      - checkout
      - run: cat "${HOME}/.cargo/env" >> ${BASH_ENV}
      - run_tox:
          toxenv: "lint"

  test_py37:
    <<: *py37
    steps:
      - checkout
      - run_tox:
          toxenv: "py37"

  test_rust:
    <<: *rust
    steps:
      - checkout
      - run: cargo test

  test_wdl:
    <<: *machine_defaults
    description: Generic testing protocol for wdl tasks
    parameters:
      tag:
        description: "pytest-workflow tag, e.g. functional, integration, test_align"
        type: string
      num_parallel_workflows:
        description: "Max number of tests to execute in parallel"
        type: integer
      resource_class:
        description: "The machine resource class to run the test with"
        type: string
        default: medium
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - set_environment_variables
      - run_tox:
          toxenv: "wdl-test"
          extra_args: "--tag << parameters.tag >> --wt << parameters.num_parallel_workflows >>"

  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - set_environment_variables
      - run:
          name: build main docker image
          command: |
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker pull quay.io/encode-dcc/${QUAY_REPO}:template
            docker build \
              --cache-from quay.io/encode-dcc/${QUAY_REPO}:template \
              --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} \
              --build-arg BRANCH=${CIRCLE_BRANCH} \
              --build-arg BUILD_TAG=${HIC_DOCKER_IMAGE_TAG} \
              -t ${HIC_DOCKER_IMAGE_TAG} \
              -t quay.io/encode-dcc/${QUAY_REPO}:template \
              -f ${DOCKERFILE_DIR}/Dockerfile .
            docker push ${HIC_DOCKER_IMAGE_TAG}
            docker logout

  build_hiccups:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - set_environment_variables
      - run:
          name: build hiccups docker image
          command: |
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker pull quay.io/encode-dcc/${HICCUPS_QUAY_REPO}:template
            docker build \
              --cache-from quay.io/encode-dcc/${HICCUPS_QUAY_REPO}:template \
              --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} \
              --build-arg BRANCH=${CIRCLE_BRANCH} \
              --build-arg BUILD_TAG=${HICCUPS_DOCKER_IMAGE_TAG} \
              -t ${HICCUPS_DOCKER_IMAGE_TAG} \
              -t quay.io/encode-dcc/${HICCUPS_QUAY_REPO}:template \
              -f ${HICCUPS_DOCKERFILE_DIR}/Dockerfile .
            docker push ${HICCUPS_DOCKER_IMAGE_TAG}
            docker logout

  push_template:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - set_environment_variables
      - get_pipeline_version
      - run:
          command: |
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker pull ${HIC_DOCKER_IMAGE_TAG}
            docker tag ${HIC_DOCKER_IMAGE_TAG} quay.io/encode-dcc/hic-pipeline:${PIPELINE_VERSION}
            docker tag ${HIC_DOCKER_IMAGE_TAG} quay.io/encode-dcc/hic-pipeline:template
            docker push quay.io/encode-dcc/hic-pipeline:${PIPELINE_VERSION}
            docker push quay.io/encode-dcc/hic-pipeline:template
            docker logout
          no_output_timeout: 30m

workflows:
  version: 2
  build_workflow:
    jobs:
      - build
      - build_hiccups
      - lint
      - test_py37:
          requires:
            - build
            - lint
      - test_rust:
          requires:
            - build
            - lint
      # Currently no unit tests, TODO add back when unit tests are added.
      # - test_wdl:
      #     name: test_wdl_unit
      #     tag: "unit"
      #     num_parallel_workflows: 8
      #     requires:
      #       - build
      #       - lint
      - test_wdl:
          name: test_wdl_integration
          resource_class: large
          tag: "integration"
          num_parallel_workflows: 8
          requires:
            - build
            - lint
      - test_wdl:
          name: test_wdl_functional
          resource_class: large
          tag: "functional"
          num_parallel_workflows: 4
          requires:
            - build
            - lint
      - push_template:
          filters:
            branches:
              only:
                - dev
          requires:
            - build_hiccups
            # - test_wdl_unit
            - test_wdl_integration
            - test_wdl_functional
            - test_rust
            - test_py37
