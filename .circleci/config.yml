defaults: &defaults
  docker:
    - image: circleci/buildpack-deps:xenial-scm
  working_directory: ~/ENCODE-DCC/hic-pipeline
  
machine_defaults: &machine_defaults
  machine: 
    image: circleci/classic:latest
  working_directory: ~/ENCODE-DCC/hic-pipeline

make_tag: &make_tag
  name: make docker image tag
  command: |
    echo "export TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" > ${BASH_ENV}

get_cromwell: &get_cromwell
  name: get the cromwell 35
  command: |
    wget -N -c https://github.com/broadinstitute/cromwell/releases/download/35/cromwell-35.jar

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: *make_tag
      - run:
          name: build image
          command: |
            source ${BASH_ENV}
            echo "pulling template!"
            docker pull quay.io/encode-dcc/hic-pipeline:template
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker build --cache-from quay.io/encode-dcc/hic-pipeline:template --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} --build-arg BRANCH=${CIRCLE_BRANCH} --build-arg BUILD_TAG=${TAG} -t $TAG -t quay.io/encode-dcc/hic-pipeline:template -f docker_image/Dockerfile .
            docker push $TAG
            docker push quay.io/encode-dcc/hic-pipeline:template
            docker logout

  test_bam2pairs_task:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: *get_cromwell
      - run:
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            java -Dconfig.file=backends/backend.conf -Dbackend.default=Local -jar cromwell-35.jar run test/test_task/test_bam2pairs.wdl -i test/test_task/test_bam2pairs.json -m metadata.json
            python3 src/compare_md5.py --keys_to_inspect test_bam2pairs.out_file --metadata_json metadata.json --reference_json test/test_task/ref_output/test_bam2pairs_output_md5.json --outfile result.json            
            cat result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < result.json

# Define workflow here
workflows:
  version: 2
  build_workflow:
    jobs:
      - build
      - test_bam2pairs_task:
          requires:
            - build
