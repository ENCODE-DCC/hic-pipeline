---
defaults: &defaults
  docker:
    - image: cimg/base:2020.01
  working_directory: ~/ENCODE-DCC/hic-pipeline

machine_defaults: &machine_defaults
  machine:
    image: ubuntu-1604:201903-01
  working_directory: ~/ENCODE-DCC/hic-pipeline

lint: &lint
  docker:
    - image: encodedcc/hic-pipeline:circleci-lint
  working_directory: ~/ENCODE-DCC/hic-pipeline

py37: &py37
  docker:
    - image: circleci/python:3.7.4-stretch
  working_directory: ~/ENCODE-DCC/hic-pipeline

rust: &rust
  docker:
    - image: circleci/rust:1.42.0-stretch
  working_directory: ~/ENCODE-DCC/hic-pipeline

commands:
  run_tox:
    description: Install and run tox with a given environment
    parameters:
      toxenv:
        description: The name of the environment as per tox.ini, e.g. py37 or lint
        type: string
      extra_args:
        description: Extra arguments that are consumed only when running pytest
        type: string
        default: ''
    steps:
      - run: sudo pip install tox
      - run: tox -e << parameters.toxenv >> -- << parameters.extra_args >>

  set_environment_variables:
    description: Set docker image env vars for builds and WDL test runs
    steps:
      - run:
          command: |
            echo "export HIC_DOCKER_IMAGE_TAG=encodedcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" >> ${BASH_ENV}
            echo "export DOCKERFILE_DIR=docker/hic-pipeline" >> ${BASH_ENV}
            echo "export HICCUPS_DOCKER_IMAGE_TAG=encodedcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}_hiccups" >> ${BASH_ENV}
            echo "export HICCUPS_DOCKERFILE_DIR=docker/hiccups" >> ${BASH_ENV}

  get_pipeline_version:
    description: get pipeline version from __init__.py
    steps:
      - run:
          command: |
            PIPELINE_VERSION=$(python3 -c "import hic_pipeline;print(hic_pipeline.__version__)")
            echo "export PIPELINE_VERSION=${PIPELINE_VERSION}" >> ${BASH_ENV}

version: 2.1
jobs:
  lint:
    <<: *lint
    steps:
      - checkout
      - run: cat "${HOME}/.cargo/env" >> ${BASH_ENV}
      - run_tox:
          toxenv: lint

  test_py37:
    <<: *py37
    steps:
      - checkout
      - run_tox:
          toxenv: py37

  test_rust:
    <<: *rust
    steps:
      - checkout
      - run: cargo test

  test_wdl:
    <<: *machine_defaults
    description: Generic testing protocol for wdl tasks
    parameters:
      tag:
        description: pytest-workflow tag, e.g. functional, integration, test_align
        type: string
      num_parallel_workflows:
        description: Max number of tests to execute in parallel
        type: integer
      resource_class:
        description: The machine resource class to run the test with
        type: string
        default: medium
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - set_environment_variables
      - run:
          name: Run pytest-workflow WDL tests using tox
          command: |
            pyenv global 3.7.0
            pip install --upgrade pip
            pip install tox
            tox -e wdl -- --tag << parameters.tag >> --wt << parameters.num_parallel_workflows >>

  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.8
      - set_environment_variables
      - run:
          name: build main docker image
          command: |
            docker login -u=${DOCKERHUB_USER} -p=${DOCKERHUB_PASS}
            docker pull encodedcc/${CIRCLE_PROJECT_REPONAME}:template
            DOCKER_BUILDKIT=1 docker build . --build-arg BUILDKIT_INLINE_CACHE=1 \
              --cache-from encodedcc/${CIRCLE_PROJECT_REPONAME}:template \
              -t ${HIC_DOCKER_IMAGE_TAG} \
              -t encodedcc/${CIRCLE_PROJECT_REPONAME}:template \
              -f ${DOCKERFILE_DIR}/Dockerfile
            docker push ${HIC_DOCKER_IMAGE_TAG}
            docker logout

  build_hiccups:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.8
      - set_environment_variables
      - run:
          name: build hiccups docker image
          command: |
            docker login -u=${DOCKERHUB_USER} -p=${DOCKERHUB_PASS}
            docker pull encodedcc/${CIRCLE_PROJECT_REPONAME}:template_hiccups
            DOCKER_BUILDKIT=1 docker build . --build-arg BUILDKIT_INLINE_CACHE=1 \
              --cache-from encodedcc/${CIRCLE_PROJECT_REPONAME}:template_hiccups \
              -t ${HICCUPS_DOCKER_IMAGE_TAG} \
              -t encodedcc/${CIRCLE_PROJECT_REPONAME}:template_hiccups \
              -f ${HICCUPS_DOCKERFILE_DIR}/Dockerfile
            docker push ${HICCUPS_DOCKER_IMAGE_TAG}
            docker logout

  push_template:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.8
      - set_environment_variables
      - get_pipeline_version
      - run:
          command: |
            docker login -u=${DOCKERHUB_USER} -p=${DOCKERHUB_PASS}
            docker pull ${HIC_DOCKER_IMAGE_TAG}
            docker pull ${HICCUPS_DOCKER_IMAGE_TAG}
            docker tag ${HIC_DOCKER_IMAGE_TAG} encodedcc/hic-pipeline:${PIPELINE_VERSION}
            docker tag ${HIC_DOCKER_IMAGE_TAG} encodedcc/hic-pipeline:template
            docker tag ${HICCUPS_DOCKER_IMAGE_TAG} encodedcc/hic-pipeline:${PIPELINE_VERSION}_hiccups
            docker tag ${HICCUPS_DOCKER_IMAGE_TAG} encodedcc/hic-pipeline:template_hiccups
            docker push encodedcc/hic-pipeline:${PIPELINE_VERSION}
            docker push encodedcc/hic-pipeline:template
            docker push encodedcc/hic-pipeline:${PIPELINE_VERSION}_hiccups
            docker push encodedcc/hic-pipeline:template_hiccups
            docker logout
          no_output_timeout: 30m

workflows:
  version: 2
  build_workflow:
    jobs:
      - build
      - build_hiccups
      - lint
      - test_py37:
          requires:
            - build
            - lint
      - test_rust:
          requires:
            - build
            - lint
      - test_wdl:
          name: test_wdl_unit
          tag: unit
          num_parallel_workflows: 8
          requires:
            - build
            - lint
      - test_wdl:
          name: test_wdl_integration
          resource_class: xlarge
          tag: integration
          num_parallel_workflows: 12
          requires:
            - build
            - lint
      - test_wdl:
          name: test_wdl_functional
          resource_class: xlarge
          tag: functional
          num_parallel_workflows: 8
          requires:
            - build
            - lint
      - push_template:
          filters:
            branches:
              only:
                - dev
          requires:
            - build_hiccups
            - test_wdl_unit
            - test_wdl_integration
            - test_wdl_functional
            - test_rust
            - test_py37
