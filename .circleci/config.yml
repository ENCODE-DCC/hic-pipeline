---
version: 2.1

parameters:
  main_tag:
    type: string
    default: encodedcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}
  hiccups_tag:
    type: string
    default: encodedcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}_hiccups
  delta_tag:
    type: string
    default: encodedcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}_delta
  main_cache_tag:
    type: string
    default: encodedcc/${CIRCLE_PROJECT_REPONAME}:template
  hiccups_cache_tag:
    type: string
    default: encodedcc/${CIRCLE_PROJECT_REPONAME}:template_hiccups
  delta_cache_tag:
    type: string
    default: encodedcc/${CIRCLE_PROJECT_REPONAME}:template_delta


defaults: &defaults
  docker:
    - image: cimg/base:2020.01
  working_directory: ~/ENCODE-DCC/hic-pipeline

machine_defaults: &machine_defaults
  machine:
    image: ubuntu-1604:201903-01
  working_directory: ~/ENCODE-DCC/hic-pipeline

py37: &py37
  docker:
    - image: circleci/python:3.7.4-stretch
  working_directory: ~/ENCODE-DCC/hic-pipeline

commands:
  run_tox:
    description: Install and run tox with a given environment
    parameters:
      toxenv:
        description: The name of the environment as per tox.ini, e.g. py37 or lint
        type: string
      extra_args:
        description: Extra arguments that are consumed only when running pytest
        type: string
        default: ''
    steps:
      - run: sudo pip install tox
      - run: tox -e << parameters.toxenv >> -- << parameters.extra_args >>

  get_pipeline_version:
    description: get pipeline version from __init__.py
    steps:
      - run:
          command: |
            PIPELINE_VERSION=$(python3 -c "import hic_pipeline;print(hic_pipeline.__version__)")
            echo "export PIPELINE_VERSION=${PIPELINE_VERSION}" >> ${BASH_ENV}

  install_shellcheck:
    description: Install shellcheck by downloading the binary, don't want to apt-get update
    steps:
      - run:
          command: |
            curl \
              -Ls \
              https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz \
              | tar xJ
            sudo mv shellcheck-stable/shellcheck /usr/local/bin

jobs:
  lint:
    <<: *py37
    steps:
      - checkout
      - install_shellcheck
      - run_tox:
          toxenv: lint

  test_py37:
    <<: *py37
    steps:
      - checkout
      - run_tox:
          toxenv: py37

  test_wdl:
    <<: *machine_defaults
    description: Generic testing protocol for wdl tasks
    parameters:
      tag:
        description: pytest-workflow tag, e.g. functional, integration, test_align
        type: string
      num_parallel_workflows:
        description: Max number of tests to execute in parallel
        type: integer
      resource_class:
        description: The machine resource class to run the test with
        type: string
        default: medium
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run:
          name: Run pytest-workflow WDL tests using tox
          command: |
            export HIC_DOCKER_IMAGE_TAG=<< pipeline.parameters.main_tag >>
            pyenv global 3.7.0
            pip install --upgrade pip
            pip install tox
            tox -e wdl -- --kwd --tag << parameters.tag >> --wt << parameters.num_parallel_workflows >>
          no_output_timeout: 20m

  build:
    <<: *defaults
    description: Build a given docker image and push to Docker Hub
    parameters:
      tag:
        description: The image (name and tag) to push
        type: string
      dockerfile_directory:
        description: The name of the environment variable pointing to folder containing the Dockerfile to build
        type: string
      cache_tag:
        description: The tagged image to be used as a cache source
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build
          command: |
            docker login -u=${DOCKERHUB_USER} -p=${DOCKERHUB_PASS}
            docker pull << parameters.cache_tag >>
            docker \
              build \
              . \
              --cache-from << parameters.cache_tag >> \
              -t << parameters.tag >> \
              -f << parameters.dockerfile_directory >>/Dockerfile
            docker push << parameters.tag >>
            docker logout

  push:
    <<: *defaults
    description: Pull an existing tag, give it a new tag, and push the new tag.
    parameters:
      source_tag:
        description: The tag of the image to be pulled
        type: string
      destination_tag:
        description: The tag to push
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - get_pipeline_version
      - run:
          name: push
          command: |
            docker login -u=${DOCKERHUB_USER} -p=${DOCKERHUB_PASS}
            docker pull << parameters.source_tag >>
            docker tag  << parameters.source_tag >> << parameters.destination_tag >>
            docker push << parameters.destination_tag >>
            docker logout
          no_output_timeout: 30m

workflows:
  version: 2
  build_workflow:
    jobs:
      - build:
          name: build_main
          tag: << pipeline.parameters.main_tag  >>
          dockerfile_directory: docker/hic-pipeline
          cache_tag: << pipeline.parameters.main_cache_tag >>
      - build:
          name: build_hiccups
          tag: << pipeline.parameters.hiccups_tag >>
          dockerfile_directory: docker/hiccups
          cache_tag: << pipeline.parameters.hiccups_cache_tag >>
      - build:
          name: build_delta
          tag: << pipeline.parameters.delta_tag >>
          dockerfile_directory: docker/delta
          cache_tag: << pipeline.parameters.delta_cache_tag >>
      - lint
      - test_py37:
          requires:
            - lint
      - test_wdl:
          name: test_wdl_unit
          resource_class: xlarge
          tag: unit
          num_parallel_workflows: 16
          requires:
            - build_main
            - lint
      - test_wdl:
          name: test_wdl_integration
          resource_class: xlarge
          tag: integration
          num_parallel_workflows: 16
          requires:
            - build_main
            - lint
      - test_wdl:
          name: test_wdl_functional
          resource_class: 2xlarge
          tag: functional
          num_parallel_workflows: 8
          requires:
            - build_main
            - lint
      - push:
          name: push_main_template
          source_tag: << pipeline.parameters.main_tag >>
          destination_tag: << pipeline.parameters.main_cache_tag >>
          requires:
            - build_main
            - lint
      - push:
          name: push_hiccups_template
          source_tag: << pipeline.parameters.hiccups_tag >>
          destination_tag: << pipeline.parameters.hiccups_cache_tag >>
          requires:
            - build_hiccups
      - push:
          name: push_delta_template
          source_tag: << pipeline.parameters.delta_tag >>
          destination_tag: << pipeline.parameters.delta_cache_tag >>
          requires:
            - build_delta
      - push:
          name: push_main
          source_tag: << pipeline.parameters.main_tag >>
          destination_tag: encodedcc/${CIRCLE_PROJECT_REPONAME}:${PIPELINE_VERSION}
          requires:
            - build_main
          filters:
            branches:
              only:
                - dev
      - push:
          name: push_hiccups
          source_tag: << pipeline.parameters.hiccups_tag >>
          destination_tag: encodedcc/${CIRCLE_PROJECT_REPONAME}:${PIPELINE_VERSION}_hiccups
          requires:
            - build_hiccups
          filters:
            branches:
              only:
                - dev
      - push:
          name: push_delta
          source_tag: << pipeline.parameters.delta_tag >>
          destination_tag: encodedcc/${CIRCLE_PROJECT_REPONAME}:${PIPELINE_VERSION}_delta
          requires:
            - build_delta
          filters:
            branches:
              only:
                - dev
