defaults: &defaults
  docker:
    - image: circleci/buildpack-deps:xenial-scm
  working_directory: ~/ENCODE-DCC/hic-pipeline
  
machine_defaults: &machine_defaults
  machine: 
    image: circleci/classic:latest
  working_directory: ~/ENCODE-DCC/hic-pipeline

make_tag: &make_tag
  name: make docker image tag
  command: |
    echo "export TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" > ${BASH_ENV}

get_cromwell: &get_cromwell
  name: get the cromwell 35
  command: |
    wget -N -c https://github.com/broadinstitute/cromwell/releases/download/35/cromwell-35.jar

version: 2.1
jobs:
  test_task:
    <<: *machine_defaults
    description: Generic testing protocol for wdl tasks
    parameters:
      task_name:
        description: "The name of the task being tested, like align, merge, etc."
        type: enum
        enum: ["align", "arrowhead", "bam2pairs", "create_hic,", "dedup", "hiccups", "merge", "merge_sort"]
      keys_to_inspect:
        description: "The key(s) of the output(s) in metadata.json for which md5sum is to be computed, space delimited"
        type: string  
    steps:
      - checkout
      - run: *make_tag
      - run: *get_cromwell
      - run:
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            test/test_task/test.sh test/test_task/test_<< parameters.task_name >>.wdl test/test_task/test_<< parameters.task_name >>.json $TAG docker
            python3 src/compare_md5.py --keys_to_inspect << parameters.keys_to_inspect >> --metadata_json test_<< parameters.task_name >>.metadata.json --reference_json test/test_task/ref_output/test_<< parameters.task_name >>_output_md5.json --outfile result.json
            cat result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < result.json

  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: *make_tag
      - run:
          name: build image
          command: |
            source ${BASH_ENV}
            echo "pulling template!"
            docker pull quay.io/encode-dcc/hic-pipeline:template
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker build --cache-from quay.io/encode-dcc/hic-pipeline:template --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} --build-arg BRANCH=${CIRCLE_BRANCH} --build-arg BUILD_TAG=${TAG} -t $TAG -t quay.io/encode-dcc/hic-pipeline:template -f docker_image/Dockerfile .
            docker push $TAG
            docker push quay.io/encode-dcc/hic-pipeline:template
            docker logout

  test_bam2pairs_task:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *make_tag
      - run: *get_cromwell
      - run:
          command: |
            pyenv global 3.5.2
            source ${BASH_ENV}
            java -Dconfig.file=backends/backend.conf -Dbackend.default=Local -jar cromwell-35.jar run test/test_task/test_bam2pairs.wdl -i test/test_task/test_bam2pairs.json -m metadata.json
            python3 src/compare_md5.py --keys_to_inspect test_bam2pairs.pairs_no_header --metadata_json metadata.json --reference_json test/test_task/ref_output/test_bam2pairs_output_md5.json --outfile result.json
            cat result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < result.json

# Define workflow here
workflows:
  version: 2
  build_workflow:
    jobs:
      - build:
        filters:
          branches:
            only:
              - master
              - dev-1
              - PIP-464-circle-align-test
              - PPIP-464-2-idan
      - test_bam2pairs_task:
          requires:
            - build
      - test_task:
          name: test_align
          requires:
            - build
          task_name: "align"
          keys_to_inspect: "test_align.collisions test_align.collisions_low_mapq test_align.unmapped test_align.mapq0 test_align.alignable"
      - test_task:
          name: test_bam2pairs
          requires:
            - build
          task_name: "bam2pairs"
          keys_to_inspect: "test_bam2pairs.pairs_no_header"