defaults: &defaults
  docker:
    - image: circleci/buildpack-deps:xenial-scm
  working_directory: ~/ENCODE-DCC/hic-pipeline

machine_defaults: &machine_defaults
  machine:
    image: ubuntu-1604:201903-01
  working_directory: ~/ENCODE-DCC/hic-pipeline

lint: &lint
  docker:
    - image: quay.io/encode-dcc/hic-pipeline:circleci-lint
  working_directory: ~/ENCODE-DCC/hic-pipeline

py37: &py37
  docker:
    - image: circleci/python:3.7.4-stretch
  working_directory: ~/ENCODE-DCC/hic-pipeline

rust: &rust
  docker:
    - image: circleci/rust:1.42.0-stretch
  working_directory: ~/ENCODE-DCC/hic-pipeline

make_tag: &make_tag
  name: make docker image tag
  command: |
    echo "export TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" >> ${BASH_ENV}

get_caper: &get_caper
  name: get caper
  command: |
    pyenv global 3.7.0
    pip install caper

get_md5_script: &get_md5_script
  name: get compare_md5.py script
  command: |
    curl -O https://raw.githubusercontent.com/ENCODE-DCC/rna-seq-pipeline/master/src/compare_md5.py

commands:
  run_tox:
    description: "Install and run tox with a given environment"
    parameters:
      toxenv:
        description: "The name of the environment as per tox.ini, e.g. py37 or lint"
        type: string
      extra_args:
        description: "Extra arguments that are consumed only when running pytest"
        type: string
        default: ""
    steps:
      - run: sudo pip install tox
      - run: tox -e << parameters.toxenv >> -- << parameters.extra_args >>

version: 2.1
jobs:
  lint:
    <<: *lint
    steps:
      - checkout
      - run: cat "${HOME}/.cargo/env" >> ${BASH_ENV}
      - run_tox:
          toxenv: "lint"
  test_py37:
    <<: *py37
    steps:
      - checkout
      - run_tox:
          toxenv: "py37"
  test_rust:
    <<: *rust
    steps:
      - checkout
      - run: cargo test
  test_wdl:
    <<: *machine_defaults
    description: Generic testing protocol for wdl tasks
    parameters:
      test_name:
        description: "The name of the test being performed, like hic, align, merge, etc."
        type: string
      test_type:
        default: "task"
        description: "Describes if the test is for a task or for a workflow"
        type: enum
        enum: ["task", "workflow"]
      keys_to_inspect:
        description: "The key(s) of the output(s) in metadata.json for which md5sum is to be computed, space delimited"
        type: string
    steps:
      - checkout
      - run: *make_tag
      - run: *get_caper
      - run: *get_md5_script
      - run:
          command: |
            source ${BASH_ENV}
            test/test_task/test.sh test/test_<< parameters.test_type >>/test_<< parameters.test_name >>.wdl test/test_<< parameters.test_type >>/test_<< parameters.test_name >>.json $TAG docker
            python3 compare_md5.py --keys_to_inspect << parameters.keys_to_inspect >> --metadata_json test_<< parameters.test_name >>.metadata.json --reference_json test/test_<< parameters.test_type >>/ref_output/test_<< parameters.test_name >>_output_md5.json --outfile result.json
            cat result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < result.json

  build:
    <<: *defaults
    parameters:
      is_hiccups_image:
        description: "Determines if the job is building a hiccups Docker image"
        type: boolean
        default: false
      push_template:
        description: "Determines whether or not to push images with template tag."
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker
      - when:
          condition: << parameters.is_hiccups_image >>
          steps:
            - run:
                command: |
                  echo "export TAG=quay.io/encode-dcc/hiccups:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" >> ${BASH_ENV}
                  echo "export QUAY_REPO=hiccups" >> ${BASH_ENV}
                  echo "export DOCKERFILE_DIR=nvidia_docker_image" >> ${BASH_ENV}
      - unless:
          condition: << parameters.is_hiccups_image >>
          steps:
            - run: *make_tag
            - run:
                name: set environ
                command: |
                  echo "export QUAY_REPO=hic-pipeline" >> ${BASH_ENV}
                  echo "export DOCKERFILE_DIR=docker_image" >> ${BASH_ENV}
      - run:
          name: build image
          command: |
            source ${BASH_ENV}
            echo "pulling template!"
            docker pull quay.io/encode-dcc/${QUAY_REPO}:template
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker build --cache-from quay.io/encode-dcc/${QUAY_REPO}:template --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} --build-arg BRANCH=${CIRCLE_BRANCH} --build-arg BUILD_TAG=${TAG} -t $TAG -t quay.io/encode-dcc/${QUAY_REPO}:template -f ${DOCKERFILE_DIR}/Dockerfile .
            docker push $TAG
            docker logout
      - when:
          condition: << parameters.push_template >>
          steps:
            run:
              name: push template
              command: docker push quay.io/encode-dcc/${QUAY_REPO}:template

# Define workflow here
workflows:
  version: 2
  build_workflow:
    jobs:
      - build
      - build:
          name: build_hiccups
          is_hiccups_image: true
          filters:
            branches:
              only:
                - /.*hiccups-image-update$/
      - lint
      - test_py37:
          requires:
            - build
            - lint
      - test_rust:
          requires:
            - build
            - lint
      - test_wdl:
          name: test_align
          requires:
            - build
          test_name: "align"
          keys_to_inspect: "test_align.collisions test_align.collisions_low_mapq test_align.unmapped test_align.mapq0 test_align.alignable test_align.sort_file test_align.norm_res test_align.alignment_stats test_align.alignment_stats_json"
      - test_wdl:
          name: test_bam2pairs
          requires:
            - build
          test_name: "bam2pairs"
          keys_to_inspect: "test_bam2pairs.pairs_no_header"
      - test_wdl:
          name: test_merge_sort
          requires:
            - build
          test_name: "merge_sort"
          keys_to_inspect: "test_merge_sort.merged"
      - test_wdl:
          name: test_dedup
          requires:
            - build
          test_name: "dedup"
          keys_to_inspect: "test_dedup.deduped test_dedup.library_complexity_json test_dedup.stats_json"
      - test_wdl:
          name: test_merge
          requires:
            - build
          test_name: "merge"
          keys_to_inspect: "test_merge.merged_no_header"
      - test_wdl:
          name: test_merge_stats
          requires:
            - build
          test_name: "merge_stats"
          keys_to_inspect: "test_merge_stats.merged_stats test_merge_stats.merged_stats_json"
      - test_wdl:
          name: test_arrowhead
          requires:
            - build
          test_name: "arrowhead"
          keys_to_inspect: "test_arrowhead.arrowhead_out"
      - test_wdl:
          name: test_create_hic
          requires:
            - build
          test_name: "create_hic"
          keys_to_inspect: "test_create_hic.hic_file test_create_hic.stats test_create_hic.stats_json test_create_hic.stats_hists"
      - test_wdl:
          name: test_hic
          requires:
            - build
          test_name: "hic"
          test_type: "workflow"
          keys_to_inspect: "test_hic.library_complexity test_hic.stats test_hic.alignments_stats test_hic.no_header_alignable_sam test_hic.out_pairs test_hic.out_dedup test_hic.no_header_hic_1 test_hic.no_header_hic_30"
      - test_wdl:
          name: test_multiple_libraries
          requires:
            - build
          test_name: "multiple_libraries"
          test_type: "workflow"
          keys_to_inspect: "test_multiple_libraries.no_header_alignable_sam test_multiple_libraries.out_pairs test_multiple_libraries.out_dedup test_multiple_libraries.no_header_hic_1 test_multiple_libraries.no_header_hic_30"
      - test_wdl:
          name: test_no_call_loops
          requires:
            - build
          test_name: "no_call_loops"
          test_type: "workflow"
          keys_to_inspect: "test_no_call_loops.domains"
      - test_wdl:
          name: test_hic_from_libraries
          requires:
            - build
          test_name: "hic_from_libraries"
          test_type: "workflow"
          keys_to_inspect: "test_hic_from_libraries.inter_1_no_header test_hic_from_libraries.inter_30_no_header"
      - test_wdl:
          name: test_no_bam2pairs
          requires:
            - build
          test_name: "no_bam2pairs"
          test_type: "workflow"
          keys_to_inspect: "test_no_bam2pairs.inter_1 test_no_bam2pairs.inter_30"
      - build:
          name: push_template
          push_template: true
          filters:
            branches:
              only:
                - dev
                - /.*hiccups-image-update$/
          requires:
            - build
            - test_align
            - test_arrowhead
            - test_bam2pairs
            - test_create_hic
            - test_dedup
            - test_merge
            - test_merge_stats
            - test_merge_sort
            - test_hic
            - test_multiple_libraries
            - test_no_call_loops
            - test_hic_from_libraries
